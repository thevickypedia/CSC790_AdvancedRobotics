#!/usr/bin/env python

from __future__ import print_function
from __future__ import division

import rospy
import pygame

from std_msgs.msg import String, Float64
from geometry_msgs.msg import Twist


import numpy as np 


zval = 0

def float_callback(data):
	global zval
	zval = data.data


def run_control_publisher():
	control_publisher = rospy.Publisher('/lab05/cmd_vel', Twist, queue_size=1)
	rate = rospy.Rate(10)

	vel_msg= Twist()
	vel_msg.linear.x=0.0
	vel_msg.linear.y=0
	vel_msg.linear.z=0
	vel_msg.angular.x=0
	vel_msg.angular.y=0
	vel_msg.angular.z=0.0


	while not rospy.is_shutdown():

		move = raw_input()
		if move == 'a':
			vel_msg.angular.z += .1
		if move == 'd':
			vel_msg.angular.z += -.1
		if move == 'w':
			vel_msg.linear.x += .1
		if move == 's':
			vel_msg.linear.x += -.1
		if move == 'q':
			vel_msg.linear.x=0.0
			vel_msg.linear.y=0
			vel_msg.linear.z=0
			vel_msg.angular.x=0
			vel_msg.angular.y=0
			vel_msg.angular.z=0.0

		control_publisher.publish(vel_msg)
		rate.sleep()



if __name__ == '__main__':

	rospy.init_node('Go_Orange', anonymous=True)
	rospy.Subscriber('/lab05/angle_to_barrel_rads', Float64, float_callback)
	pygame.init()

	try:
		run_control_publisher()
	except rospy.ROSInterruptException:
		pass